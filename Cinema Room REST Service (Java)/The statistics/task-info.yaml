type: edu
files:
  - name: src/cinema/Main.java
    visible: true
    text: |
      package cinema;
      
      import org.springframework.boot.SpringApplication;
      import org.springframework.boot.autoconfigure.SpringBootApplication;
      
      @SpringBootApplication
      public class Main {
          public static void main(String[] args) {
              SpringApplication.run(Main.class, args);
          }
      }
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    text: |-
      server.port=28852
      management.endpoints.web.exposure.include=*
      management.endpoint.shutdown.enabled=true
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      buildscript {
          repositories {
              mavenCentral()
          }
          dependencies {
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
      }
      
      test {
          jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
      }
    learner_created: false
  - name: test/CinemaTests.java
    visible: false
    text: |
      import cinema.Main;
      import com.google.gson.Gson;
      import com.google.gson.JsonObject;
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.exception.outcomes.PresentationError;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.mocks.web.response.HttpResponse;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      
      import java.util.Map;
      import java.util.UUID;
      
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
      
      public class CinemaTests extends SpringTest {
      
          private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
          private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
          private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
          private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";
      
          private static final Gson gson = new Gson();
      
          private static String token = "";
      
          public CinemaTests() {
              super(Main.class);
          }
      
          private static void checkStatusCode(HttpResponse resp, int status) {
              if (resp.getStatusCode() != status) {
                  throw new WrongAnswer(
                          resp.getRequest().getMethod() + " " +
                                  resp.getRequest().getLocalUri() +
                                  " should respond with status code " + status + ", " +
                                  "responded: " + resp.getStatusCode() + "\n\n" +
                                  "Response body:\n\n" + resp.getContent()
                  );
              }
          }
      
          CheckResult testEndpoint() {
              HttpResponse response = get("/seats").send();
              checkStatusCode(response, 200);
              return CheckResult.correct();
          }
      
          CheckResult testEndpointAvailableSeats() {
              HttpResponse response = get("/seats").send();
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("available_seats",
                                      isArray(
                                              81,
                                              isObject()
                                                      .value("row", isInteger(i -> i >= 1 && i <= 9))
                                                      .value("column", isInteger(i -> i >= 1 && i <= 9))
                                                      .value("price", isInteger(price -> price == 10 || price == 8))
                                      )
                              )
                              .value("total_columns", 9)
                              .value("total_rows", 9)
              );
              return CheckResult.correct();
          }
      
          CheckResult testPurchaseTicket() {
              HttpResponse response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", "1",
                              "column", "1"
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson()
                      .check(
                              isObject()
                                      .value("token", isString())
                                      .value("ticket",
                                              isObject()
                                                      .value("row", 1)
                                                      .value("column", 1)
                                                      .value("price", 10)
                                      )
                      );
      
              JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
              token = object.get("token").getAsString();
      
              return CheckResult.correct();
          }
      
          CheckResult testErrorMessageThatTicketHasBeenPurchased() {
              HttpResponse response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", "1",
                              "column", "1"
                      ))
              ).send();
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson()
                      .check(
                              isObject()
                                      .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                                      .anyOtherValues()
                      );
              return CheckResult.correct();
          }
      
          CheckResult testErrorMessageThatNumbersOutOfBounds() {
              HttpResponse response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", "10",
                              "column", "1"
                      ))
              ).send();
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson()
                      .check(
                              isObject()
                                      .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                      .anyOtherValues()
                      );
      
              response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", "1",
                              "column", "10"
                      ))
              ).send();
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson()
                      .check(
                              isObject()
                                      .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                      .anyOtherValues()
                      );
      
              response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", "-1",
                              "column", "-1"
                      ))
              ).send();
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson()
                      .check(
                              isObject()
                                      .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                      .anyOtherValues()
                      );
      
      
              return CheckResult.correct();
          }
      
          CheckResult testReturnTicket() {
      
              HttpResponse response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", 2,
                              "column", 5
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson()
                      .check(
                              isObject()
                                      .value("token", isString())
                                      .value("ticket",
                                              isObject()
                                                      .value("row", 2)
                                                      .value("column", 5)
                                                      .value("price", 10)
                                      )
                      );
      
              JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);
      
              String tokenFromResponse = jsonResponse.get("token").getAsString();
              String wrongToken = UUID.randomUUID().toString();
      
              try {
                  response = post(
                          "/return",
                          gson.toJson(Map.of(
                                  "token", wrongToken
                          ))
                  ).send();
              } catch (PresentationError e) {
                  return CheckResult.wrong("An error occurred while trying to send POST /return with wrong token. " +
                          "In such scenario your program should respond with a 400 status code.");
              }
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                              .anyOtherValues()
              );
      
              response = post(
                      "/return",
                      gson.toJson(Map.of(
                              "token", tokenFromResponse
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("returned_ticket",
                                      isObject()
                                              .value("row", 2)
                                              .value("column", 5)
                                              .value("price", 10)
                              )
              );
      
              return CheckResult.correct();
          }
      
          CheckResult testStatsEndpoint() {
      
              HttpResponse response = get("/stats").addParams(Map.of()).send();
              checkStatusCode(response, 401);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("error", WRONG_PASSWORD_MESSAGE)
                              .anyOtherValues()
              );
      
      
              return CheckResult.correct();
          }
      
          CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
              Map<String, String> requestParams = Map.of("password", "super_secret");
              HttpResponse response = get("/stats").addParams(requestParams).send();
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                              .value("current_income", currentIncome)
                              .value("number_of_available_seats", availableSeats)
              );
      
              return CheckResult.correct();
          }
      
          CheckResult returnTicket() {
              HttpResponse response = post(
                      "/return",
                      gson.toJson(Map.of(
                              "token", token
                      ))
              ).send();
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("returned_ticket",
                                      isObject()
                                              .value("row", 7)
                                              .value("column", 4)
                                              .value("price", 8)
                              )
              );
      
              return CheckResult.correct();
          }
      
          CheckResult testPurchaseAnotherTicket() {
              HttpResponse response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", "7",
                              "column", "4"
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson()
                      .check(
                              isObject()
                                      .value("token", isString())
                                      .value("ticket",
                                              isObject()
                                                      .value("row", 7)
                                                      .value("column", 4)
                                                      .value("price", 8)
                                      )
                      );
      
              JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
              token = object.get("token").getAsString();
      
              return CheckResult.correct();
          }
      
          CheckResult testTokenInvalidation() {
      
              HttpResponse response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", 3,
                              "column", 6
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("token", isString())
                              .value("ticket",
                                      isObject()
                                              .value("row", 3)
                                              .value("column", 6)
                                              .value("price", 10)
                              )
              );
      
              JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);
              String tokenFromResponse = jsonResponse.get("token").getAsString();
      
              response = post(
                      "/return",
                      gson.toJson(Map.of(
                              "token", tokenFromResponse
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("returned_ticket",
                                      isObject()
                                              .value("row", 3)
                                              .value("column", 6)
                                              .value("price", 10)
                              )
              );
      
              response = post(
                      "/return",
                      gson.toJson(Map.of(
                              "token", tokenFromResponse
                      ))
              ).send();
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                              .anyOtherValues()
              );
      
              return CheckResult.correct();
          }
      
          CheckResult testReturnedTicketAvailability() {
      
              HttpResponse response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", 3,
                              "column", 6
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("token", isString())
                              .value("ticket",
                                      isObject()
                                              .value("row", 3)
                                              .value("column", 6)
                                              .value("price", 10)
                              )
              );
      
              JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);
              String tokenFromResponse = jsonResponse.get("token").getAsString();
      
              response = post(
                      "/return",
                      gson.toJson(Map.of(
                              "token", tokenFromResponse
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("returned_ticket",
                                      isObject()
                                              .value("row", 3)
                                              .value("column", 6)
                                              .value("price", 10)
                              )
              );
      
              response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", 3,
                              "column", 6
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("token", isString())
                              .value("ticket",
                                      isObject()
                                              .value("row", 3)
                                              .value("column", 6)
                                              .value("price", 10)
                              )
              );
      
              return CheckResult.correct();
          }
      
          @DynamicTest
          DynamicTesting[] dynamicTests = new DynamicTesting[]{
                  this::testEndpoint,
                  this::testEndpointAvailableSeats,
                  this::testPurchaseTicket,
                  this::testErrorMessageThatTicketHasBeenPurchased,
                  this::testErrorMessageThatNumbersOutOfBounds,
                  this::testReturnTicket,
                  this::testStatsEndpoint,
                  () -> testStats(1, 10, 80),
                  this::testPurchaseAnotherTicket,
                  () -> testStats(2, 18, 79),
                  this::returnTicket,
                  () -> testStats(1, 10, 80),
                  this::testTokenInvalidation,
                  this::testReturnedTicketAvailability
          };
      }
    learner_created: false
  - name: src/cinema/model/Seat.java
    visible: true
    text: |
      package cinema.model;
      
      import lombok.Getter;
      import lombok.Setter;
      
      @Getter
      @Setter
      public class Seat {
          private int row;
          private int column;
          private int price;
          private boolean isAvailable;
          public Seat (int row, int column, int price) {
              this.column = column;
              this.row = row;
              this.price = price;
              this.isAvailable = true;
          }
      }
    learner_created: true
  - name: src/cinema/dto/CinemaDTO.java
    visible: true
    text: |
      package cinema.dto;
      
      import java.util.List;
      
      public record CinemaDTO(int total_rows,
                                  int total_columns,
                                  List<SeatDTO> available_seats) {
      }
    learner_created: true
  - name: src/cinema/exception/RowOrColumnOutOfBoundsException.java
    visible: true
    text: |
      package cinema.exception;
      
      public class RowOrColumnOutOfBoundsException extends RuntimeException{
          public RowOrColumnOutOfBoundsException(String msg) {
              super(msg);
          }
      
      }
    learner_created: true
  - name: src/cinema/exception/TokenExpiredException.java
    visible: true
    text: |
      package cinema.exception;
      
      public class TokenExpiredException extends RuntimeException{
          public TokenExpiredException(String msg) {
              super(msg);
          }
      }
    learner_created: true
  - name: src/cinema/dto/SeatDTO.java
    visible: true
    text: |
      package cinema.dto;
      
      public record SeatDTO(int row, int column, int price) {
      }
    learner_created: true
  - name: src/cinema/configuration/TokenConfiguration.java
    visible: true
    text: |
      package cinema.configuration;
      
      import cinema.model.Token;
      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      
      import java.util.UUID;
      
      @Configuration
      public class TokenConfiguration {
          @Bean
          public Token createToken() {
              return new Token(UUID.randomUUID());
          }
      }
    learner_created: true
  - name: src/cinema/dto/RefundTicketResponse.java
    visible: true
    text: |
      package cinema.dto;
      
      import com.fasterxml.jackson.annotation.JsonProperty;
      
      public record RefundTicketResponse(@JsonProperty("returned_ticket") ReturnedTicket returnedTicket) {
          public record ReturnedTicket(int row, int column, int price) {
          }
      }
    learner_created: true
  - name: src/cinema/model/Cinema.java
    visible: true
    text: |+
      package cinema.model;
      
      import com.fasterxml.jackson.annotation.JsonProperty;
      import lombok.*;
      import java.util.List;
      @Getter
      @Setter
      @AllArgsConstructor
      public class Cinema {
          @JsonProperty("total_rows")
          private int totalRows;
          @JsonProperty("total_columns")
          private int totalColumns;
          private List<Seat> seats;
      }
    
    learner_created: true
  - name: src/cinema/dto/PurchaseSeatRequest.java
    visible: true
    text: |
      package cinema.dto;
      
      public record PurchaseSeatRequest (int row, int column){
      }
    learner_created: true
  - name: src/cinema/controller/CinemaController.java
    visible: true
    text: |
      package cinema.controller;
      
      import cinema.dto.*;
      import cinema.model.Token;
      import cinema.service.CinemaService;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.web.bind.annotation.*;
      
      import java.util.Map;
      
      @RestController
      public class CinemaController {
          private final CinemaService cinemaService;
          @Autowired
          public CinemaController(CinemaService cinemaService) {
              this.cinemaService = cinemaService;
          }
          @GetMapping("/seats")
          public CinemaDTO getSeats() {
              return cinemaService.getAvailableSeats();
          }
          @PostMapping("/purchase")
          public PurchasedSeat purchaseSeat(@RequestBody PurchaseSeatRequest seatRequest) {
              return cinemaService.purchaseSeat(seatRequest.row(), seatRequest.column());
          }
          @PostMapping("/return")
          public RefundTicketResponse refundTicket(@RequestBody Map<String, String> requestBody) {
              String token = requestBody.get("token");
              return cinemaService.refundTicket(token);
          }
      }
    learner_created: true
  - name: src/cinema/configuration/CinemaConfiguration.java
    visible: true
    text: |
      package cinema.configuration;
      
      import cinema.model.Cinema;
      import cinema.model.Seat;
      import org.springframework.beans.factory.annotation.Value;
      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      
      import java.util.ArrayList;
      import java.util.List;
      
      @Configuration
      public class CinemaConfiguration {
          @Bean
          public Cinema cinema(@Value("${cinema.rows}") int totalRows,
                               @Value("${cinema.cols}") int totalColumns) {
              List<Seat> seats = new ArrayList<>();
              for (int row = 1; row <= totalRows; row++) {
                  for (int column = 1; column <= totalColumns; column++) {
                      Seat seat = new Seat(row, column, calculatePrice(row));
                      seats.add(seat); // Initially, all seats are available
                  }
              }
              return new Cinema(totalRows, totalColumns, seats);
          }
      
          private int calculatePrice(int row) {
              return row <= 4 ? 10 : 8;
          }
      }
    learner_created: true
  - name: src/cinema/service/CinemaService.java
    visible: true
    text: |
      package cinema.service;
      
      import  cinema.dto.CinemaDTO;
      import cinema.dto.PurchasedSeat;
      import cinema.dto.RefundTicketResponse;
      import cinema.dto.SeatDTO;
      import cinema.exception.RowOrColumnOutOfBoundsException;
      import cinema.exception.TicketAlreadyPurchasedException;
      import cinema.exception.TokenExpiredException;
      import cinema.model.Cinema;
      import cinema.model.Seat;
      import cinema.model.Token;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.http.HttpStatus;
      import org.springframework.stereotype.Service;
      import org.springframework.web.server.ResponseStatusException;
      
      import java.util.HashSet;
      import java.util.List;
      import java.util.Set;
      
      @Service
      public class CinemaService {
          private final Cinema cinema;
          private final Set<PurchasedSeat> purchasedSeats = new HashSet<>();
          @Autowired
          public CinemaService(Cinema cinema, Token token) {
              this.cinema = cinema;
          }
          public CinemaDTO getAvailableSeats() {
              // Get a list of available seats in the cinema
              List<SeatDTO> availableDtoSeats = cinema.getSeats().stream()
                      .filter(Seat::isAvailable)
                      .map(this::convertSeatToDTO)
                      .toList();
              // Returns a CinemaDTO object to represent total rows and columns and the available seats
              return new CinemaDTO(cinema.getTotalRows(),
                      cinema.getTotalColumns(),
                      availableDtoSeats);
          }
          private SeatDTO convertSeatToDTO(Seat seat) {
              return new SeatDTO(seat.getRow(), seat.getColumn(), seat.getPrice());
          }
          public PurchasedSeat purchaseSeat(int row, int column) {
              // Check if the row and column are within bounds
              if (row < 0 || row >= cinema.getTotalRows() || column < 0 || column >= cinema.getTotalColumns()) {
                  throw new RowOrColumnOutOfBoundsException( "The number of a row or a column is out of bounds!");
              }
              // Find the seat that matches the specified row and column
              Seat foundSeat = findSeat(row, column);
              // Check if a seat was found
              if(foundSeat!=null){
                  if(!foundSeat.isAvailable()){
                      throw new TicketAlreadyPurchasedException( "The ticket has been already purchased!");
                  }
                  // Mark the seat as not available
                  foundSeat.setAvailable(false);
                  // Convert the purchased seat to a Purchased Seat
                  PurchasedSeat purchasedSeat = convertToPurchaseResponse(foundSeat);
                  purchasedSeats.add(purchasedSeat);
                  return purchasedSeat;
              }
              throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Seat not found.");
          }
          private Seat findSeat(int row, int column) {
              return cinema.getSeats().stream()
                      .filter(seat -> seat.getRow() == row && seat.getColumn() == column  )
                      .findFirst()
                      .orElse(null);
          }
          private PurchasedSeat convertToPurchaseResponse(Seat seat) {
              Token token = new Token();
              return new PurchasedSeat(token.toString(), new PurchasedSeat.Ticket(seat.getRow(), seat.getColumn(), seat.getPrice()));
          }
          public RefundTicketResponse refundTicket(String responseToken) {
              PurchasedSeat matchingSeat = purchasedSeats.stream()
                      .filter(purchasedSeat -> purchasedSeat.token().equals(responseToken))
                      .findFirst()
                      .orElse(null);
              if (matchingSeat != null) {
                  purchasedSeats.remove(matchingSeat);
                  setSeatAvailable(matchingSeat);
                  return new RefundTicketResponse(convertTicketToReturnedTicket(matchingSeat.ticket()));
              } else {
                  throw new TokenExpiredException("Wrong token!");
              }
          }
          private void setSeatAvailable(PurchasedSeat purchasedSeat) {
              findSeat(purchasedSeat.ticket().row(), purchasedSeat.ticket().column()).setAvailable(true);
          }
          private RefundTicketResponse.ReturnedTicket convertTicketToReturnedTicket(PurchasedSeat.Ticket ticket) {
              return new RefundTicketResponse.ReturnedTicket(ticket.row(), ticket.column(), ticket.price());
          }
      }
    learner_created: true
  - name: src/cinema/model/Token.java
    visible: true
    text: |-
      package cinema.model;
      
      import lombok.AllArgsConstructor;
      import lombok.Getter;
      import lombok.Setter;
      
      import java.util.UUID;
      
      @Getter
      @Setter
      @AllArgsConstructor
      public class Token {
          UUID token;
      
          public Token() {
              this.token = UUID.randomUUID();
          }
      
          @Override
          public String toString() {
              return token.toString(); // For the Response, that the token field is a simple string, not nested within a token object
          }
      }
    learner_created: true
  - name: src/cinema/exception/CustomExceptionHandler.java
    visible: true
    text: |
      package cinema.exception;
      
      import org.springframework.http.ResponseEntity;
      import org.springframework.web.bind.annotation.ExceptionHandler;
      import org.springframework.web.bind.annotation.RestControllerAdvice;
      import org.springframework.web.context.request.WebRequest;
      
      import java.util.Map;
      
      @RestControllerAdvice
      public class CustomExceptionHandler {
      
          @ExceptionHandler(TicketAlreadyPurchasedException.class)
          public ResponseEntity<Map<String, String>> handleTicketAlreadyPurchasedException(TicketAlreadyPurchasedException ex) {
              Map<String, String> errorResponse = Map.of("error", ex.getMessage());
              return ResponseEntity.badRequest().body(errorResponse);
          }
      
          @ExceptionHandler(RowOrColumnOutOfBoundsException.class)
          public ResponseEntity<Map<String, String>> rowOrColumnOutOfBoundsException(RowOrColumnOutOfBoundsException ex) {
              Map<String, String> errorResponse = Map.of("error", ex.getMessage());
              return ResponseEntity.badRequest().body(errorResponse);
          }
      
          @ExceptionHandler(TokenExpiredException.class)
          public ResponseEntity<Map<String, String>> tokenExpiredException(TokenExpiredException ex) {
              Map<String, String> errorResponse = Map.of("error", ex.getMessage());
              return ResponseEntity.badRequest().body(errorResponse);
          }
      }
    learner_created: true
  - name: src/cinema/exception/TicketAlreadyPurchasedException.java
    visible: true
    text: |+
      package cinema.exception;
      
      public class TicketAlreadyPurchasedException extends RuntimeException {
          public TicketAlreadyPurchasedException(String msg) {
              super(msg);
          }
      }
    
    learner_created: true
  - name: src/cinema/dto/PurchaseSeatResponse.java
    visible: true
    text: |
      package cinema.dto;
      
      public record PurchasedSeat(String token, Ticket ticket) {
          public record Ticket(int row, int column, int price) {
          }
      }
    learner_created: true
  - name: src/cinema/dto/StatsResponse.java
    visible: true
    learner_created: true
  - name: src/cinema/exception/AuthenticationException.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Mon, 11 Sep 2023 16:22:10 UTC"
record: -1
